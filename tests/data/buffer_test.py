import unittest
import numpy as np

from flightdatautilities.data import buffer as bf


class TestBuffer(unittest.TestCase):

    def test_buffer_bytes(self):
        buff = bf.Buffer()
        self.assertEqual(buff.size, 0)
        self.assertEqual(buff.read(10), b'')
        buff.truncate(10)
        self.assertEqual(buff.size, 0)
        buff.clear()
        self.assertEqual(buff.size, 0)
        buff.add(b'')
        self.assertEqual(buff.size, 0)
        buff.add(b'a')
        self.assertEqual(buff.size, 1)
        self.assertEqual(buff.read(0), b'')
        self.assertEqual(buff.read(-1), b'')
        self.assertEqual(buff.size, 1)
        self.assertEqual(buff.peek(1), b'a')
        self.assertEqual(buff.size, 1)
        self.assertEqual(buff.read(1), b'a')
        self.assertEqual(buff.size, 0)
        buff.add(b'a')
        buff.add(b'b')
        self.assertEqual(buff.size, 2)
        buff.truncate(0)
        self.assertEqual(buff.size, 2)
        buff.truncate(-5)
        self.assertEqual(buff.size, 2)
        buff.truncate(1)
        self.assertEqual(buff.size, 1)
        buff.truncate(5)
        self.assertEqual(buff.size, 0)
        buff.add(b'testing')
        buff.add(b'the')
        buff.add(b'buffer')
        self.assertEqual(buff.size, 16)
        self.assertEqual(buff.peek(2), b'te')
        self.assertEqual(buff.size, 16)
        self.assertEqual(buff.read(2), b'te')
        self.assertEqual(buff.size, 14)
        buff.truncate(7)
        self.assertEqual(buff.size, 7)
        self.assertEqual(buff.peek(5), b'ebuff')
        self.assertEqual(buff.size, 7)
        self.assertEqual(buff.read(5), b'ebuff')
        self.assertEqual(buff.size, 2)

    def test_buffer_array(self):
        buff = bf.Buffer(dtype=np.uint8)
        self.assertEqual(buff.size, 0)
        data = buff.read(10)
        self.assertEqual(data.dtype, np.uint8)
        self.assertEqual(len(data), 0)
        buff.add(np.zeros(0, dtype=np.uint8))
        self.assertEqual(buff.size, 0)
        buff.add(np.array([5], dtype=np.uint8))
        self.assertEqual(buff.size, 1)
        self.assertEqual(buff.peek(1).tolist(), [5])
        self.assertEqual(buff.size, 1)
        self.assertEqual(buff.read(1).tolist(), [5])
        self.assertEqual(buff.size, 0)
        buff.add(np.array([3], dtype=np.uint8))
        buff.add(np.array([8], dtype=np.uint8))
        self.assertEqual(buff.size, 2)
        buff.truncate(0)
        self.assertEqual(buff.size, 2)
        buff.truncate(1)
        self.assertEqual(buff.size, 1)
        buff.truncate(5)
        self.assertEqual(buff.size, 0)
        buff.add(np.arange(0, 7, dtype=np.uint8))
        buff.add(np.arange(20, 23, dtype=np.uint8))
        buff.add(np.arange(30, 36, dtype=np.uint8))
        self.assertEqual(buff.size, 16)
        self.assertEqual(buff.peek(2).tolist(), [0, 1])
        self.assertEqual(buff.size, 16)
        self.assertEqual(buff.read(2).tolist(), [0, 1])
        self.assertEqual(buff.size, 14)
        buff.truncate(7)
        self.assertEqual(buff.size, 7)
        self.assertEqual(buff.peek(5).tolist(), [22, 30, 31, 32, 33])
        self.assertEqual(buff.size, 7)
        self.assertEqual(buff.read(5).tolist(), [22, 30, 31, 32, 33])
        self.assertEqual(buff.size, 2)


class TestDataBufferUint8(unittest.TestCase):
    def test_data_buffer_uint8(self):
        buff = bf.DataBufferUint8()
        self.assertEqual(buff.size, 0)
        data = buff.read(10)
        self.assertEqual(len(data), 0)
        buff.add(np.zeros(0, dtype=np.uint8))
        self.assertEqual(buff.size, 0)
        buff.add(np.array([5], dtype=np.uint8))
        self.assertEqual(buff.size, 1)
        self.assertEqual(list(buff.peek(1)), [5])
        self.assertEqual(buff.size, 1)
        self.assertEqual(list(buff.read(1)), [5])
        self.assertEqual(buff.size, 0)
        buff.add(np.array([3], dtype=np.uint8))
        buff.add(np.array([8], dtype=np.uint8))
        self.assertEqual(buff.size, 2)
        buff.truncate(0)
        self.assertEqual(buff.size, 2)
        buff.truncate(1)
        self.assertEqual(buff.size, 1)
        buff.truncate(5)
        self.assertEqual(buff.size, 0)
        buff.add(np.arange(0, 7, dtype=np.uint8))
        buff.add(np.arange(20, 23, dtype=np.uint8))
        buff.add(np.arange(30, 36, dtype=np.uint8))
        self.assertEqual(buff.size, 16)
        self.assertEqual(list(buff.peek(2)), [0, 1])
        self.assertEqual(buff.size, 16)
        self.assertEqual(list(buff.read(2)), [0, 1])
        self.assertEqual(buff.size, 14)
        buff.truncate(7)
        self.assertEqual(buff.size, 7)
        self.assertEqual(list(buff.peek(5)), [22, 30, 31, 32, 33])
        self.assertEqual(buff.size, 7)
        self.assertEqual(list(buff.read(5)), [22, 30, 31, 32, 33])
        self.assertEqual(buff.size, 2)


class TestWriteBufferUint16(unittest.TestCase):
    def test_write_buffer_uint16(self):
        self.assertRaises(ValueError, bf.WriteBufferUint16, -1)
        self.assertRaises(ValueError, bf.WriteBufferUint16, 0)
        write_buffer = bf.WriteBufferUint16(8)
        self.assertEqual(write_buffer.size, 0)
        self.assertEqual(list(write_buffer.flush()), [])
        self.assertRaises(ValueError, write_buffer.write_uint8, np.zeros(1, dtype=np.uint8))
        write_buffer.write_uint8(np.zeros(0, dtype=np.uint8))
        self.assertEqual(write_buffer.size, 0)
        self.assertEqual(list(write_buffer.flush()), [])
        data = np.array([0x24, 0x36, 0x48, 0x5A], dtype=np.uint8)
        write_buffer.write_uint8(data)
        self.assertEqual(write_buffer.size, 2)
        self.assertEqual(list(write_buffer.flush()), [0x3624, 0x5A48])
        self.assertEqual(write_buffer.size, 0)
        write_buffer.write_uint8(data, byteswap=True)
        self.assertEqual(write_buffer.size, 2)
        self.assertEqual(list(write_buffer.flush()), [0x2436, 0x485A])
        self.assertEqual(write_buffer.size, 0)
        data = np.array([0x2436, 0x485A], dtype=np.uint16)
        write_buffer.write_uint16(data)
        self.assertEqual(write_buffer.size, 2)
        write_buffer.write_uint16(data)
        self.assertEqual(write_buffer.size, 4)
        self.assertEqual(list(write_buffer.flush()), [0x2436, 0x485A, 0x2436, 0x485A])
        self.assertEqual(write_buffer.size, 0)
